@page "/login"
@using BE.DTO
@using BE.Entities
@using Infrastructure.Interfaces.BLL
@using Infrastructure.Helpers
@using Infrastructure.Session
@using Infrastructure.Mappers
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IUserBLL UserBLL
@inject ILogBLL LogBLL
@inject ILanguageBLL LanguageBLL
@inject ICheckDigitBLL CheckDigitBLL
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject ProtectedSessionStorage SessionStorage

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <h2>SIFRE - Sistema de Login</h2>
        </div>
        
        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label for="username">Usuario:</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" placeholder="Ingrese su usuario" />
                <ValidationMessage For="@(() => loginModel.Username)" />
            </div>

            <div class="form-group">
                <label for="password">Contraseña:</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Ingrese su contraseña" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            @if (showError)
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            <div class="form-group">
                <button type="submit" class="btn btn-primary btn-block" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span> Verificando...</span>
                    }
                    else
                    {
                        <span>Iniciar Sesión</span>
                    }
                </button>
            </div>
        </EditForm>
        
        @if (showInconsistencyDialog)
        {
            <InconsistencyDialog Message="@inconsistencyMessage" 
                               IsAdmin="@isCurrentUserAdmin"
                               OnClose="@HandleInconsistencyDialogClose" />
        }
    </div>
</div>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .login-card {
        background: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
    }

    .login-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .login-header h2 {
        color: #333;
        margin-bottom: 0.5rem;
        font-weight: 300;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        color: #555;
        font-weight: 500;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid #e1e5e9;
        border-radius: 5px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
    }

    .form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 5px;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }

    .btn-primary:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .btn-block {
        width: 100%;
    }

    .alert {
        padding: 0.75rem 1rem;
        border-radius: 5px;
        margin-bottom: 1rem;
    }

    .alert-danger {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }

    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
        border-width: 0.2em;
    }

    .spinner-border {
        display: inline-block;
        border: 0.25em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    @keyframes spinner-border {
        to { transform: rotate(360deg); }
    }
</style>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool showError = false;
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private int attempts = 0;
    private string currentUser = string.Empty;
    private bool showInconsistencyDialog = false;
    private string inconsistencyMessage = string.Empty;
    private bool isCurrentUserAdmin = false;
    
    private List<string> tables = new List<string> { "Products", "Transactions", "PointTransfers" };

    protected override async Task OnInitializedAsync()
    {
        // Verificar si ya está autenticado
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            Navigation.NavigateTo("/", true);
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            showError = false;
            StateHasChanged();

            // Resetear intentos si cambió el usuario
            if (currentUser != loginModel.Username)
            {
                attempts = 0;
                currentUser = loginModel.Username ?? string.Empty;
            }

            // Encriptar contraseña
            string encryptedPassword = EncryptionHelper.Encrypt(loginModel.Password ?? string.Empty);

            // Autenticar usuario
            UserDTO? user = UserBLL.GetByUsernameAndPassword(currentUser, encryptedPassword);

            if (user != null)
            {
                await HandleSuccessfulLogin(user);
            }
            else
            {
                await HandleFailedLogin();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error interno del sistema. Contacte al administrador.";
            showError = true;
            
            // Log del error
            await LogError($"Error en login: {ex.Message}", user: null);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleSuccessfulLogin(UserDTO user)
    {
        // Establecer sesión
        SingletonSession.Instancia.Login(user);
        SingletonSession.Instancia.currentLanguage = LanguageBLL.GetById(user.LanguageId, true)!;

        // Verificar integridad de datos
        string inconsistencyError = await VerifyDataIntegrity();

        if (!string.IsNullOrEmpty(inconsistencyError))
        {
            await HandleDataInconsistency(inconsistencyError, user);
        }
        else
        {
            // Login exitoso - redirigir al dashboard
            await SetAuthenticationState(user);
            Navigation.NavigateTo("/dashboard", true);
        }
    }

    private async Task HandleFailedLogin()
    {
        attempts++;
        errorMessage = "Usuario y/o contraseña incorrectos.";
        showError = true;

        if (attempts >= 3)
        {
            // Bloquear usuario
            bool isBlocked = UserBLL.Block(currentUser);
            
            if (isBlocked)
            {
                errorMessage = "Usuario bloqueado.";
                await LogError($"Usuario bloqueado por múltiples intentos fallidos: {currentUser}", user: null);
            }
            else
            {
                errorMessage = "Usuario y/o contraseña incorrectos.";
            }
            showError = true;
        }
    }

    private async Task<string> VerifyDataIntegrity()
    {
        foreach (var table in tables)
        {
            string response = CheckDigitBLL.VerifyTable(table);
            if (!string.IsNullOrEmpty(response))
            {
                return response;
            }
        }
        return string.Empty;
    }

    private async Task HandleDataInconsistency(string inconsistencyError, UserDTO user)
    {
        isCurrentUserAdmin = user.UserRole.Name == "Administrador";
        inconsistencyMessage = inconsistencyError;
        showInconsistencyDialog = true;

        // Log del error crítico
        await LogError(inconsistencyError, user, LogType.Critical);
    }

    private async Task HandleInconsistencyDialogClose(bool shouldContinue)
    {
        showInconsistencyDialog = false;
        
        if (shouldContinue && isCurrentUserAdmin)
        {
            // Si es admin y decide continuar, ir al dashboard
            await SetAuthenticationState(SingletonSession.Instancia.User);
            Navigation.NavigateTo("/dashboard", true);
        }
        else if (!isCurrentUserAdmin)
        {
            // Si no es admin, limpiar sesión y mostrar error
            SingletonSession.Instancia.Logout();
            errorMessage = "Error de inconsistencia de información, por favor comunícate con un administrador";
            showError = true;
        }
        
        StateHasChanged();
    }

    private async Task SetAuthenticationState(UserDTO user)
    {
        // Guardar información del usuario en el session storage
        await SessionStorage.SetAsync("user", user);
        
        // Notificar al AuthenticationStateProvider del cambio
        if (AuthStateProvider is CustomAuthenticationStateProvider customProvider)
        {
            await customProvider.MarkUserAsAuthenticated(user);
        }
    }

    private async Task LogError(string message, UserDTO? user, LogType logType = LogType.Error)
    {
        try
        {
            var log = new Log
            {
                Message = message,
                CreatedAt = DateTime.Now,
                CreatedBy = user != null ? UsersMapper.DtoToUser(user) : null,
                Type = logType,
                Module = "Login"
            };
            
            LogBLL.Save(log);
        }
        catch (Exception ex)
        {
            // En caso de error al guardar el log, usar el logger de la aplicación
            Console.WriteLine($"Error al guardar log: {ex.Message}");
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "El usuario es requerido")]
        public string? Username { get; set; }

        [Required(ErrorMessage = "La contraseña es requerida")]
        public string? Password { get; set; }
    }
}