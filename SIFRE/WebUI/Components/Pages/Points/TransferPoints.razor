@page "/transferir-puntos"
@using BE.DTO
@using BE.Enums
@inject IPointBLL PointBLL
@inject IUserBLL UserBLL
@inject NavigationManager Navigation
@rendermode InteractiveServer
@using Infrastructure.Session
@using WebUI.Components

<RoleGuard RequiredPermissions="@(new[] { PermissionsType.CONSULTAR_PUNTOS })">
    <h3>Transferencia de Puntos</h3>

    @if (ShowError)
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }
    @if (ShowSuccess)
    {
        <div class="alert alert-success">Puntos transferidos con éxito.</div>
    }

    <div class="mb-3">
        <label>Colaborador:</label>
        <select class="form-select" @bind="SelectedUserIdStr">
            <option value="">-- Seleccionar --</option>
            @foreach (var user in Users)
            {
                <option value="@user.Id.ToString()">@user.Username</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label>Puntos a transferir:</label>
        <input type="number" class="form-control" @bind="PointsToTransfer" min="1" />
    </div>

    <button class="btn btn-success" @onclick="Transfer">Transferir</button>

    <p class="mt-3"><strong>Puntos disponibles:</strong> @UserPoints</p>

    <hr />

    <h5>Historial de transferencias</h5>
    @if (TransferHistory is not null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Destino</th>
                    <th>Puntos</th>
                    <th>Fecha</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var t in TransferHistory)
                {
                    <tr>
                        <td>@t.Receiver</td>
                        <td>@t.Points</td>
                        <td>@t.TransferDate.ToString("dd/MM/yyyy")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</RoleGuard>

@code {
    private IList<UserDTO> Users = new List<UserDTO>();
    private IList<PointTransferDTO> TransferHistory;
    private string? SelectedUserIdStr;
    private int PointsToTransfer;
    private long UserPoints;

    private bool ShowError = false;
    private string ErrorMessage = string.Empty;
    private bool ShowSuccess = false;

    private Guid SelectedUserId => Guid.TryParse(SelectedUserIdStr, out var id) ? id : Guid.Empty;

    protected override void OnInitialized()
    {
        if (SingletonSession.Instancia?.User != null && SingletonSession.Instancia.IsInRole(PermissionsType.CANJEAR_PUNTOS))
        {
            Users = UserBLL.GetAllUsers()
            .Where(u => u.Id != SingletonSession.Instancia.User.Id)
            .ToList();

            UserPoints = PointBLL.GetPointsByUserId(SingletonSession.Instancia.User.Id);
            TransferHistory = PointBLL.GetPointTransfers();
        }


    }

    private void Transfer()
    {
        ShowError = false;
        ShowSuccess = false;

        if (SelectedUserId == Guid.Empty)
        {
            ShowError = true;
            ErrorMessage = "Debe seleccionar un colaborador.";
            return;
        }

        if (PointsToTransfer <= 0)
        {
            ShowError = true;
            ErrorMessage = "Debe ingresar una cantidad mayor a cero.";
            return;
        }

        if (PointsToTransfer > UserPoints)
        {
            ShowError = true;
            ErrorMessage = "No puede transferir más puntos de los que tiene.";
            return;
        }

        PointBLL.TransferPointsToUser(PointsToTransfer, SelectedUserId);

        ShowSuccess = true;
        UserPoints = PointBLL.GetPointsByUserId(SingletonSession.Instancia.User.Id);
        TransferHistory = PointBLL.GetPointTransfers();
        PointsToTransfer = 0;
        SelectedUserIdStr = null;
    }
}
