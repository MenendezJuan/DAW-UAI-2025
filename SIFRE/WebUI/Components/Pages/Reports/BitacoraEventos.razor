@page "/bitacora-eventos"
@using BE.DTO
@using BE.Entities
@using BE.Enums
@using BLL
@using Infrastructure.Session
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@inject ILogBLL LogBLL
@inject SingletonSession SingletonSession

<RoleGuard RequiredPermissions="@(new[] { PermissionsType.BITACORA_EVENTOS })">
    <h3 class="text-primary fw-bold">üìÖ Bit√°cora de Eventos</h3>

    <!-- Filtros -->
    <div class="row mb-4">
        <div class="col-md-3">
            <label class="form-label">M√≥dulo:</label>
            <input type="text" class="form-control" @bind="moduleFilter" placeholder="Filtrar por m√≥dulo" />
        </div>
        <div class="col-md-3">
            <label class="form-label">Tipo de Log:</label>
            <select class="form-select" @bind="typeFilter">
                <option value="">Todos los tipos</option>
                <option value="@LogType.Info">Info</option>
                <option value="@LogType.Warning">Warning</option>
                <option value="@LogType.Error">Error</option>
                <option value="@LogType.Critical">Critical</option>
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label">Fecha Desde:</label>
            <input type="date" class="form-control" @bind="dateFromFilter" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Fecha Hasta:</label>
            <input type="date" class="form-control" @bind="dateToFilter" />
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button class="btn btn-primary me-2" @onclick="LoadLogs">Buscar</button>
            <button class="btn btn-secondary" @onclick="ClearFilters">Limpiar</button>
        </div>
    </div>

    <!-- Tabla de logs -->
    @if (logs != null && logs.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Fecha</th>
                        <th>Usuario</th>
                        <th>M√≥dulo</th>
                        <th>Tipo</th>
                        <th>Mensaje</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var log in logs)
                    {
                        <tr class="@GetRowClass(log.Type)">
                            <td>@log.Id</td>
                            <td>@log.CreatedAt.ToString("dd/MM/yyyy HH:mm:ss")</td>
                            <td>@log.CreatedBy</td>
                            <td>@log.Module</td>
                            <td>
                                <span class="badge @GetBadgeClass(log.Type)">
                                    @GetTypeIcon(log.Type) @log.Type
                                </span>
                            </td>
                            <td>@log.Message</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="mt-3">
            <button class="btn btn-success" @onclick="ExportToPdf">
                üìÑ Exportar a PDF
            </button>
            <span class="ms-3 text-muted">Total de registros: @logs.Count</span>
        </div>
    }
    else if (logs != null && !logs.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i> No se encontraron eventos con los filtros aplicados.
        </div>
    }
    else
    {
        <div class="alert alert-secondary">
            <i class="bi bi-search"></i> Use los filtros para buscar eventos en la bit√°cora.
        </div>
    }

</RoleGuard>

@code {
    private List<LogDTO> logs;
    private string moduleFilter = "";
    private LogType? typeFilter = null;
    private DateTime? dateFromFilter;
    private DateTime? dateToFilter;

    protected override void OnInitialized()
    {
        if (SingletonSession.Instancia?.User != null && SingletonSession.Instancia.IsInRole(PermissionsType.BITACORA_EVENTOS))
        {
            // Cargar logs de los √∫ltimos 30 d√≠as por defecto
            dateFromFilter = DateTime.Now.AddDays(-30);
            dateToFilter = DateTime.Now;
            LoadLogs();
        }
    }

    private void LoadLogs()
    {
        try
        {
            logs = LogBLL.GetLogs(typeFilter, string.IsNullOrWhiteSpace(moduleFilter) ? null : moduleFilter, dateFromFilter, dateToFilter);
        }
        catch (Exception ex)
        {
            logs = new List<LogDTO>();
        }
    }

    private void ClearFilters()
    {
        moduleFilter = "";
        typeFilter = null;
        dateFromFilter = DateTime.Now.AddDays(-30);
        dateToFilter = DateTime.Now;
        LoadLogs();
    }

    private string GetRowClass(LogType type)
    {
        return type switch
        {
            LogType.Error => "table-danger",
            LogType.Critical => "table-danger",
            LogType.Warning => "table-warning",
            _ => ""
        };
    }

    private string GetBadgeClass(LogType type)
    {
        return type switch
        {
            LogType.Info => "bg-primary",
            LogType.Warning => "bg-warning text-dark",
            LogType.Error => "bg-danger",
            LogType.Critical => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private string GetTypeIcon(LogType type)
    {
        return type switch
        {
            LogType.Info => "‚ÑπÔ∏è",
            LogType.Warning => "‚ö†Ô∏è",
            LogType.Error => "‚ùå",
            LogType.Critical => "üö®",
            _ => "üìù"
        };
    }

    private async Task ExportToPdf()
    {
        if (logs == null || !logs.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "No hay eventos para exportar.");
            return;
        }

        try
        {
            var pdfBytes = PdfExportService.CrearReportePDF(logs);
            var base64 = Convert.ToBase64String(pdfBytes);
            var date = DateTime.Now.ToString("yyyyMMddHHmmss");
            await JSRuntime.InvokeVoidAsync("descargarArchivo", $"bitacora-eventos-{date}.pdf", base64);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error al exportar: " + ex.Message);
        }
    }
} 