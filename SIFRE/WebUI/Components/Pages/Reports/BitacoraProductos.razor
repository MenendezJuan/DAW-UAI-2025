@page "/bitacora-productos"
@using BE.DTO
@using BE.Entities
@using BE.Enums
@using BLL
@using Infrastructure.Session
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@inject ILogBLL LogBLL
@inject IProductBLL ProductBLL
@inject SingletonSession SingletonSession

<RoleGuard RequiredPermissions="@(new[] { PermissionsType.BITACORA_PRODUCTOS })">
    <h3 class="text-success fw-bold">ðŸ“¦ BitÃ¡cora de Productos</h3>

    <!-- Filtros -->
    <div class="row mb-4">
        <div class="col-md-3">
            <label class="form-label">Producto:</label>
            <select class="form-select" @bind="productFilter">
                <option value="">Todos los productos</option>
                @if (products != null)
                {
                    @foreach (var product in products)
                    {
                        <option value="@product.Id">@product.ProductName</option>
                    }
                }
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label">Fecha Desde:</label>
            <input type="date" class="form-control" @bind="dateFromFilter" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Fecha Hasta:</label>
            <input type="date" class="form-control" @bind="dateToFilter" />
        </div>
        <div class="col-md-3">
            <label class="form-label">Estado:</label>
            <select class="form-select" @bind="statusFilter">
                <option value="">Todos los estados</option>
                <option value="true">Bloqueado</option>
                <option value="false">Activo</option>
            </select>
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button class="btn btn-primary me-2" @onclick="LoadProductLogs">Buscar</button>
            <button class="btn btn-secondary" @onclick="ClearFilters">Limpiar</button>
        </div>
    </div>

    <!-- Tabla de logs de productos -->
    @if (productLogs != null && productLogs.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Producto</th>
                        <th>DescripciÃ³n</th>
                        <th>Puntos</th>
                        <th>CategorÃ­a</th>
                        <th>Fecha Inicio</th>
                        <th>Estado</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var log in productLogs)
                    {
                        <tr class="@GetRowClass(log.IsBlocked)">
                            <td>@log.Id</td>
                            <td>
                                <strong>@log.ProductName</strong>
                                <br />
                                <small class="text-muted">ID: @log.ProductId</small>
                            </td>
                            <td>@log.Description</td>
                            <td>
                                <span class="badge bg-info">@log.Points pts</span>
                            </td>
                            <td>@log.Category</td>
                            <td>@log.StartDate.ToString("dd/MM/yyyy HH:mm")</td>
                            <td>
                                @if (log.IsBlocked)
                                {
                                    <span class="badge bg-danger">ðŸš« Bloqueado</span>
                                }
                                else
                                {
                                    <span class="badge bg-success">âœ… Activo</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="mt-3">
            <button class="btn btn-success" @onclick="ExportToPdf">
                ðŸ“„ Exportar a PDF
            </button>
            <span class="ms-3 text-muted">Total de registros: @productLogs.Count</span>
        </div>
    }
    else if (productLogs != null && !productLogs.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i> No se encontraron registros de productos con los filtros aplicados.
        </div>
    }
    else
    {
        <div class="alert alert-secondary">
            <i class="bi bi-search"></i> Use los filtros para buscar registros en la bitÃ¡cora de productos.
        </div>
    }

    <!-- Resumen estadÃ­stico -->
    @if (productLogs != null && productLogs.Any())
    {
        <div class="row mt-4">
            <div class="col-md-12">
                <h5>ðŸ“Š Resumen</h5>
                <div class="row">
                    <div class="col-md-3">
                        <div class="card border-success">
                            <div class="card-body text-center">
                                <h5 class="card-title text-success">@productLogs.Count(p => !p.IsBlocked)</h5>
                                <p class="card-text">Productos Activos</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-danger">
                            <div class="card-body text-center">
                                <h5 class="card-title text-danger">@productLogs.Count(p => p.IsBlocked)</h5>
                                <p class="card-text">Productos Bloqueados</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-info">
                            <div class="card-body text-center">
                                <h5 class="card-title text-info">@productLogs.Sum(p => p.Points)</h5>
                                <p class="card-text">Total Puntos</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-warning">
                            <div class="card-body text-center">
                                <h5 class="card-title text-warning">@productLogs.Select(p => p.Category.Trim()).Distinct().Count()</h5>
                                <p class="card-text">CategorÃ­as</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

</RoleGuard>

@code {
    private List<ProductLog> productLogs;
    private List<ProductDTO> products;
    private string productFilter = "";
    private bool? statusFilter = null;
    private DateTime? dateFromFilter;
    private DateTime? dateToFilter;

    protected override void OnInitialized()
    {
        if (SingletonSession.Instancia?.User != null && SingletonSession.Instancia.IsInRole(PermissionsType.BITACORA_PRODUCTOS))
        {
            // Cargar productos para el filtro
            products = ProductBLL.GetProducts(false, true).ToList();
            
            // Cargar logs de los Ãºltimos 30 dÃ­as por defecto
            dateFromFilter = DateTime.Now.AddDays(-30);
            dateToFilter = DateTime.Now;
            LoadProductLogs();
        }
    }

    private void LoadProductLogs()
    {
        try
        {
            var productIdFilter = string.IsNullOrWhiteSpace(productFilter) ? null : productFilter;
            productLogs = LogBLL.GetLogs(productIdFilter, dateFromFilter, dateToFilter);
            
            // Aplicar filtro de estado si estÃ¡ definido
            if (statusFilter.HasValue)
            {
                productLogs = productLogs.Where(p => p.IsBlocked == statusFilter.Value).ToList();
            }
        }
        catch (Exception ex)
        {
            productLogs = new List<ProductLog>();
            // PodrÃ­amos mostrar un error al usuario aquÃ­
        }
    }

    private void ClearFilters()
    {
        productFilter = "";
        statusFilter = null;
        dateFromFilter = DateTime.Now.AddDays(-30);
        dateToFilter = DateTime.Now;
        LoadProductLogs();
    }

    private string GetRowClass(bool isBlocked)
    {
        return isBlocked ? "table-danger" : "";
    }

    private async Task ExportToPdf()
    {
        if (productLogs == null || !productLogs.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "No hay registros de productos para exportar.");
            return;
        }

        try
        {
            var pdfBytes = PdfExportService.CrearReportePDF(productLogs);
            var base64 = Convert.ToBase64String(pdfBytes);
            var date = DateTime.Now.ToString("yyyyMMddHHmmss");
            await JSRuntime.InvokeVoidAsync("descargarArchivo", $"bitacora-productos-{date}.pdf", base64);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error al exportar: " + ex.Message);
        }
    }
} 